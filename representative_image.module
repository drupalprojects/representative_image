<?php

/**
 * @file
 * Allows users to specify a representative image for a content type by choosing
 * which image field contains the appropriate image.
 */

/**
 * Implements hook_form_alter().
 */
function representative_image_form_node_type_form_alter(&$form, &$form_state) {
  if (isset($form['#node_type']->type)) {
    $type = $form['#node_type']->type;
  }
  else {
    return;
  }

  $options = representative_image_available_fields($type);
  $form['representative_image_fieldset'] = array(
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#title' => t('Representative image'),
    '#group' => 'additional_settings',
    'representative_image' => array(
      '#type' => 'select',
      '#options' => $options,
      '#empty_option' => t('None'),
      '#empty_value' => 0,
      '#default_value' => _representative_image_get_field_key($type),
    ),
  );

  if (count($options)) {
    $form['representative_image_fieldset']['#description'] = t('Select a representative image for this node type, which will then be available in a token. See README.txt of the representative_image module for details.');
    $form['#submit'][] = 'representative_image_content_type_form_submit_handler';
  }
  else {
    $form['representative_image_fieldset']['#description'] = t('Please define at least one image field for this content type to define a representative image.');
   }
 }

/**
 * Submit handler for the node type form.
 */
function representative_image_content_type_form_submit_handler($form, &$form_state) {
  representative_image_set_field($type, $field);
}

/**
 * Implements hook_token_info().
 */
function representative_image_token_info() {
  $node['representative_image'] = array(
    'name' => t('Representative image'),
    'description' => t('Replaced with an image from a node\'s field as defined in admin/structure/types/manage/my_content_type'),
  );

  return array(
    'tokens' => array('node' => $node),
  );
}

/**
 * Implements hook_tokens().
 */
function representative_image_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();

  if ($type == 'node' && !empty($data['node'])) {
    $node = $data['node'];

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'representative_image':
          $replacements[$original] = representative_image($node);
          break;
      }
    }
  }
  return $replacements;
}

/**
 * Given a node object, returns a representative image as an absolute URL.
 *
 * If anything goes wrong, returns the value of the variable.
 *
 * @param $node
 *   A node object
 *
 * @return
 *   A string with a representative image as a fully formed absolute URL or an
 *   empty string if nothing could be found.
 */
function representative_image($node) {
  $image = '';

  if (isset($node->type)) {
    if ($field = representative_image_get_field($node->type)) {
      $field_items = field_get_items('node', $node, $field);
      if(is_array($field_items) && count($field_items) && isset($field_items[0]['uri'])) {
        $r = file_create_url($field_items[0]['uri']);
      }
    }
  }

  // If we don't have anything here, try to get the default image for info on
  // how to set the default image, see the README.txt file.
  // @todo: Is there a better way to handle this?
  if (!$image) {
    global $base_url;
    $image = $base_url . '/' . variable_get('representative_image_default', '');
  }
  return $image;
}

/**
 * Given a node type machine name, returns available image fields.
 */
function representative_image_available_fields($type) {
  $fields = array();

  foreach (field_info_instances('node', $type) as $name => $info) {
    $supported_widget_types = array(
      'image_image',
      'media_generic',
    );

    if (isset($info['widget']['type']) && in_array($info['widget']['type'], $supported_widget_types)) {
      $fields[$name] = $info['label'] . ' (' . $name . ')';
    }
  }
  return $fields;
}

/**
 * Given a node type, return its representative image field if it exists, NULL
 * otherwise.
 */
function representative_image_get_field($type) {
  $field = NULL;

  $fields = variable_get('representative_image_fields', array('node' => array()));
  if (isset($fields['node'][$type]) && array_key_exists($fields['node'][$type], representative_image_available_fields($type))) {
    $field = $fields['node'][$type];
  }
  return $field;
}

/**
 * Set the default field for a given node.
 */
function representative_image_set_field($type, $field) {
  $fields = variable_get('representative_image_fields', array('node' => array()));
  $fields['node'][$type] = $field;
  variable_set('representative_image_fields', $fields);
}

/**
 * Like representative_image_get_field, but returns 0 if NULL.
 */
function _representative_image_get_field_key($type) {
  $field = representative_image_get_field($type);
  if ($field === NULL) {
    return '0';
  }
  return $field;
}

/**
 * Helper function to help you set this up without pointing and clicking.
 *
 * Install the devel module, go to devel/php and type in
 * dpm(_representative_image_deploy_helper()); then copy paste the result in a
 * hook_update_n() function. Edit it there, and finally update your database
 * with drush updb or by visiting update.php.
 * @todo: there must be a better way to handle this.
 */
function _representative_image_deploy_helper() {
  $node_types = node_type_get_types();
  $lines = array();
  $lines[] = '/**';
  $lines[] = ' * Implements hook_update_n(). Set up representative images';
  $lines[] = ' */';
  $lines[] = 'function mymodule_update_7005() {';
  $lines[] = '  variable_set(\'representative_image_default\', \'sites/default/files/path/to/default.png\');';
  $lines[] = '  variable_set(\'representative_image_fields\', array(\'node\' => array(';
  foreach ($node_types as $type => $object) {
    $available_fields = array_keys(representative_image_available_fields($type));
    $lines[] = '    \'' . $type . '\' => \'' . implode('|', $available_fields) . '\',';
  }
  $lines[] = '  )));';
  $lines[] = '}';
  return implode('
', $lines);
}

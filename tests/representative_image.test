<?php

/**
 * @file
 * Function and unit tests for Representative Image.
 */

/**
 * A base test case for Representative Image
 */
class RepresentativeImageBaseTest extends DrupalWebTestCase {
  /**
   * Enable modules and create users with specific permissions.
   */
  function setUp() {
    $modules = func_get_args();
    if (isset($modules[0]) && is_array($modules[0])) {
      $modules = $modules[0];
    }

    parent::setUp(array_merge(array('representative_image', 'entity'), $modules));

    $this->admin = $this->drupalCreateUser(array('administer nodes', 'administer content types', 'create article content', 'create page content', 'administer users'));
    $this->drupalLogin($this->admin);
  }

  /**
   * Asserts that, given an entity, the expected image is considered the
   * representative image.
   *
   * @param object $entity
   *   The entity to test.
   *
   * @param string $entity_type
   *   The type of entity being checked.
   *
   * @param object $image
   *   An image object as returned by drupalGetTestFiles(image).
   *
   * @param string $message (optional)
   *   The message to display with the test results.
   */
  function assertRepresentativeImage($entity, $entity_type, $image, $message = '') {
    // @todo: Is there a less brittle assertion here? In threory if a site named
    // every image "image.jpg" and uploaded it, this test would still pass even
    // if the wrong image is being displayed.
    $message = empty($message) ? 'The correct representative image was returned' : $message;
    $this->assertTrue(strpos(representative_image($entity, $entity_type), $image->name), $message);
  }

  /**
   * Asserts that the correct field is set as the representative image field for
   * the given bundle.
   *
   * @param string $entity_type
   *   The type of entity being checked.
   *
   * @param string $bundle_name
   *   The bundle being checked.
   *
   * @param string $field
   *   The name of the field expected to be identified as the representative
   *   image field.
   *
   * @param string $message (optional)
   *   The message to display with the test results.
   */
  function assertRepresentativeImageField($entity_type, $bundle_name, $field, $message = '') {
    $message = empty($message) ? $entity_type . '\'s representative image is correctly set to ' . $field : $message;
    $this->assertTrue(representative_image_get_field($entity_type, $bundle_name) == $field, $message);
  }

  /**
   * Provides a random image object.
   *
   * @return
   *   A file object which has the following attributes:
   *     $file->url (for example, public://image-2.jpg)
   *     $file->filename (for example, image-2.jpg)
   *     $file->name (for example, image-2)
   */
  function randomImage() {
    // Get all test images in the form of an array.
    $images = $this->drupalGetTestFiles('image');
    // Get the next one on the list, wrapping around if necessary.
    static $i = 0;
    return $images[($i++)%count($images)];
  }

  /**
   * Create an image field.
   *
   * @param string $url
   *   The URL of the admin form where this field is being created.
   *
   * @return string
   *   The name of the newly created field.
   */
  function createImageField($url) {
    $new_field_label = drupal_strtolower($this->randomName());
    $edit = array(
      'fields[_add_new_field][type]' => 'image',
      'fields[_add_new_field][widget_type]' => 'image_image',
      'fields[_add_new_field][label]' => $new_field_label,
      'fields[_add_new_field][field_name]' => $new_field_label,
    );
    $this->drupalPost($url, $edit, 'Save');
    $this->drupalPost(NULL, array(), 'Save field settings');
    $this->drupalPost(NULL, array(), 'Save settings');

    // For some reason, simpletest needs to clear the field cache for the new
    // field to be available properly when field_info_instances() is called.
    field_info_cache_clear();

    return $new_field_label;
  }

  /**
   * Attach a field to a bundle.
   *
   * @param string $entity_type
   *   The type of entity to which this field is being addded.
   *
   * @param string $bundle_name
   *   The bundle to which this field is being added.
   *
   * @param string $field
   *   The name of the field being attached.
   */
  function setRepresentativeImageField($entity_type, $bundle_name, $field) {
    $edit = array(
      'representative_image[' . $entity_type . '][' . $bundle_name . ']' => $field,
    );

    $this->drupalPost('admin/config/media/representative_image', $edit, t('Save configuration'));
  }

  /**
   * Reset the provided static variables.
   *
   * @param  array  $names (optional)
   *   An array of variable names to be reset. If empty a default set will be
   *   used.
   */
  function resetStaticVariables($names = array()) {
    if (empty($names)) {
      $names[] = 'representative_image_get_field';
      $names[] = 'field_language';
    }

    foreach ($names as $name) {
      drupal_static_reset($name);
    }
  }
}

/**
 * Test that entities can have associated representative image fields.
 */
class RepresentativeImageEntitiesTestCase extends RepresentativeImageBaseTest {
  function setUp() {
    parent::setUp();
  }

  public static function getInfo() {
    return array(
      'name' => 'Representative Image functionality',
      'description' => 'Test that entities can have associated representative image fields.',
      'group' => 'Representative Image',
    );
  }

  /**
   * Confirm that node entities can have representative images.
   */
  function testNodeTest() {
    // Add the existing image field (field_image) for Page.
    $edit = array(
      'fields[_add_existing_field][field_name]' => 'field_image',
      'fields[_add_existing_field][widget_type]' => 'image_image',
      'fields[_add_existing_field][label]' => $this->randomName(),
    );
    $this->drupalPost('admin/structure/types/manage/page/fields', $edit, 'Save');
    $this->drupalPost(NULL, array(), 'Save settings');

    // Add a new field for Page and set the representative images for the article
    // and page content types.
    $new_field_label = $this->createImageField('admin/structure/types/manage/page/fields');
    $this->setRepresentativeImageField('node', 'page', 'field_' . $new_field_label);
    $this->setRepresentativeImageField('node', 'article', 'field_image');

    // Grab some dummy images.
    $images = array();
    for ($i = 0; $i < 3; $i++) {
      $images[$i] = $this->randomImage();
    }
    // Now create a new Article with a given image.
    $edit = array(
      'title' => $this->randomName(),
      'files[field_image_' . LANGUAGE_NONE . '_0]' => drupal_realpath($images[0]->uri),
    );
    $this->drupalPost('node/add/article', $edit, t('Save'));

    // Now create a new Page with two images, one per field (this will allow us
    // to test if the correct image is returned as "representative").
    $edit = array(
      'title' => ($article_image = $this->randomName()),
      'files[field_image_' . LANGUAGE_NONE . '_0]' => drupal_realpath($images[1]->uri),
      'files[field_' . $new_field_label . '_' . LANGUAGE_NONE . '_0]' => drupal_realpath($images[2]->uri),
    );
    $this->drupalPost('node/add/page', $edit, t('Save'));

    $this->assertRepresentativeImageField('node', 'page', 'field_' . $new_field_label, 'Page\'s representative image is a new image field (even though field_image does exist.');
    $this->assertRepresentativeImageField('node', 'article', 'field_image');
    $this->assertRepresentativeImage(node_load(1), 'node', $images[0]);
    $this->assertRepresentativeImage(node_load(2), 'node', $images[2]);
  }

  function testUserTest() {
    // Add an image field to the default user bundle and set it as the
    // representative image. By running this process twice we test that changing
    // the representative image field on users works properly.
    for ($i = 1; $i <= 2; $i++) {
      $this->resetStaticVariables();

      $image = $this->randomImage();

      $new_field_label = $this->createImageField('admin/config/people/accounts/fields');
      $this->setRepresentativeImageField('user', 'user', 'field_' . $new_field_label);

      // Add an image to the admin user.
      $edit = array(
        'files[field_' . $new_field_label . '_' . LANGUAGE_NONE . '_0]' => drupal_realpath($image->uri),
      );

      $this->drupalPost('user/' . $this->admin->uid . '/edit', $edit, t('Save'));
      $this->assertRepresentativeImageField('user', 'user', 'field_' . $new_field_label);
      $this->assertRepresentativeImage(user_load($this->admin->uid, TRUE), 'user', $image);
    }
  }

  function testCommentTest() {
    $content_type = 'article';

    // Add an image field to the article comment bundle and set it as the
    // representative image. By running this process twice we test that changing
    // the representative image field on comments works properly.
    for ($i = 1; $i <= 2; $i++) {
      $this->resetStaticVariables();

      $image = $this->randomImage();

      $new_field_label = $this->createImageField('admin/structure/types/manage/' . $content_type . '/comment/fields');
      $this->setRepresentativeImageField('comment', 'comment_node_' . $content_type, 'field_' . $new_field_label);

      // Add an image to a comment on a node.
      $node = $this->drupalCreateNode(array('type' => $content_type));
      $edit = array(
        'comment_body[' . LANGUAGE_NONE . '][0][value]' => $this->randomString(),
        'files[field_' . $new_field_label . '_' . LANGUAGE_NONE . '_0]' => drupal_realpath($image->uri),
      );
      $this->drupalPost('node/' . $node->nid, $edit, t('Save'));

      $match = array();
      // Get comment ID
      preg_match('/#comment-([0-9]+)/', $this->getURL(), $match);
      $this->assertTrue((!empty($match) && !empty($match[1])), 'Comment id found.');
      $cid = isset($match[1]) ? $match[1] : '';

      if (!empty($cid)) {
        $this->assertRepresentativeImageField('comment', 'comment_node_' . $content_type, 'field_' . $new_field_label);
        $this->assertRepresentativeImage(comment_load($cid, TRUE), 'comment', $image);
      }

    }
  }

}

/**
 * Test that third-party modules can alter the representative images.
 */
class RepresentativeImageAlterTestCase extends RepresentativeImageBaseTest {
  function setUp() {
    parent::setUp(array('representative_image_test'));
  }

  public static function getInfo() {
    return array(
      'name' => 'Representative Image Alter functionality',
      'description' => 'Test that third-party modules can alter representative images.',
      'group' => 'Representative Image',
    );
  }

  /**
   * Confirm that node entities can have representative images.
   */
  function testAlterTest() {
    global $base_url;
    $this->assertTrue(representative_image($this->drupalCreateNode(), 'node') == $base_url . '/page.png', 'It is possible for third party modules to alter the representative image for page.');
    $this->assertTrue(representative_image($this->drupalCreateNode(array('type' => 'article')), 'node') == $base_url . '/article.png', 'It is possible for third party modules to alter the representative image for article.');
  }

}

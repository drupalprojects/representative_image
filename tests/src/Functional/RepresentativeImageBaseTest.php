<?php

namespace Drupal\Tests\representative_image\Functional;

use Drupal\FunctionalJavascriptTests\DrupalSelenium2Driver;
use Drupal\FunctionalJavascriptTests\JavascriptTestBase;
use Drupal\Tests\image\Kernel\ImageFieldCreationTrait;
use Drupal\Tests\TestFileCreationTrait;

/**
 * Contains common logic for functional tests.
 *
 * @group representative_image
 */
class RepresentativeImageBaseTest extends JavascriptTestBase {

  use ImageFieldCreationTrait;
  use TestFileCreationTrait;

  /**
   * {@inheritdoc}
   */
  protected $minkDefaultDriverClass = DrupalSelenium2Driver::class;

  /**
   * {@inheritdoc}
   */
  public static $modules = ['field_ui', 'file', 'image', 'node', 'representative_image'];

  /**
   * The admin user account.
   *
   * @var \Drupal\Core\Session\AccountInterface
   */
  protected $adminUser;

  /**
   * {@inheritdoc}
   */
  public function setUp() {
    parent::setUp();

    $this->adminUser = $this->drupalCreateUser([
      'administer site configuration',
      'administer nodes',
      'administer content types',
      'bypass node access',
      'administer users',
    ]);
    $this->drupalLogin($this->adminUser);
  }

  /**
   * Correct image assertion for given entity.
   *
   * Asserts that, given an entity, the expected image is considered the
   * representative image.
   *
   * @param object $entity
   *   The entity to test.
   * @param string $entity_type
   *   The type of entity being checked.
   * @param object $image
   *   An image object as returned by getTestFiles(image).
   * @param string $message
   *   (optional) The message to display with the test results.
   */
  function assertRepresentativeImage($entity, $entity_type, $image, $message = '') {
    // @todo: Is there a less brittle assertion here? In theory if a site named
    // every image "image.jpg" and uploaded it, this test would still pass even
    // if the wrong image is being displayed.
    $message = empty($message) ? 'The correct representative image was returned' : $message;
    $this->assertTrue(strpos(representative_image($entity, $entity_type), $image->name), $message);
  }

  /**
   * Correct field assertion for given bundle.
   *
   * Asserts that the correct field is set as the representative image field for
   * the given bundle.
   *
   * @param string $entity_type
   *   The type of entity being checked.
   * @param string $bundle_name
   *   The bundle being checked.
   * @param string $field
   *   The name of the field expected to be identified as the representative
   *   image field.
   * @param string $message
   *   (optional) The message to display with the test results.
   */
  public function assertRepresentativeImageField($entity_type, $bundle_name, $field, $message = '') {
    $message = empty($message) ? $entity_type . '\'s representative image is correctly set to ' . $field : $message;
    $this->assertTrue(representative_image_get_field($entity_type, $bundle_name) == $field, $message);
  }

  /**
   * Correct field assertion for generated image.
   *
   * Asserts that an image generated by getTestFiles(image) was displayed
   * correctly.
   *
   * @param  object $image
   *   An image object as returned by getTestFiles(image).
   * @param  string $haystack
   *   (optional) A string to search for the image path. If provided pregmatch
   *   will be used otherwise assertPattern will be called.
   * @param string $message
   *   (optional) The message to display with the test results.
   */
  public function assertImage($image, $haystack = '', $message = '') {
    $message = empty($message) ? $image->name . ' was correctly displayed' : $message;
    list($filename, $extension) = explode('.', $image->filename);
    $pattern = '/' . $filename . '(_?[0-9]?\.{1})' . $extension . '/';

    if (!empty($haystack)) {
      $this->assert((bool) preg_match($pattern, $haystack), $message);
    }
    else {
      $this->assertPattern($pattern, $message);
    }
  }

  /**
   * Negative field assertion for generated image.
   *
   * Asserts that an image generated by getTestFiles(image) was correctly
   * not displayed.
   *
   * @param  object $image
   *   An image object as returned by getTestFiles(image).
   * @param  string $haystack
   *   (optional) A string to search for the image path. If provided pregmatch
   *   will be used otherwise assertNoPattern will be called.
   * @param string $message
   *   (optional) The message to display with the test results.
   */
  public function assertNoImage($image, $haystack = '', $message = '') {
    $message = empty($message) ? $image->name . ' was correctly not displayed' : $message;
    list($filename, $extension) = explode('.', $image->filename);
    $pattern = '/' . $filename . '(_?[0-9]?)\.' . $extension . '/';

    if (!empty($haystack)) {
      $this->assert(!preg_match($pattern, $haystack), $message);
    }
    else {
      $this->assertNoPattern($pattern, $message);
    }
  }

  /**
   * Provides a random image object.
   *
   * @param string $type
   *   The type of file to be created for testing purposes.
   *
   * @return
   *   A file object which has the following attributes:
   *   - $file->url (for example, public://image-2.jpg)
   *   - $file->filename (for example, image-2.jpg)
   *   - $file->name (for example, image-2)
   */
  public function randomFile($type = 'image') {
    // Get all test images in the form of an array.
    $files = $this->getTestFiles($type);
    // Get the next one on the list, wrapping around if necessary.
    static $i = 0;
    return $files[($i++)%count($files)];
  }

  /**
   * Attach a field to a bundle.
   *
   * @param string $entity_type
   *   The type of entity to which this field is being added.
   * @param string $bundle_name
   *   The bundle to which this field is being added.
   *
   * @param string $field
   *   The name of the field being attached.
   */
  public function setRepresentativeImageField($entity_type, $bundle_name, $field) {
    $edit = array(
      'representative_image[' . $entity_type . '][' . $bundle_name . ']' => $field,
    );

    $this->drupalPost('admin/config/media/representative_image', $edit, t('Save configuration'));
    $this->resetStaticVariables();
  }

  /**
   * Reset the provided static variables.
   *
   * @param  array  $names
   *   (optional) An array of variable names to be reset. If empty a default set
   *   will be used.
   */
  public function resetStaticVariables($names = array()) {
    if (empty($names)) {
      $names[] = 'representative_image_get_field';
      $names[] = 'field_language';
    }

    foreach ($names as $name) {
      drupal_static_reset($name);
    }
  }

  /**
   * Default method for representative image fallback.
   *
   * Sets the method that should be used to find a representative image when
   * none is found.
   *
   * @param string $method (optional)
   *   'logo', 'first', 'all'
   */
  public function setDefaultMethod($method = '') {
    $edit = array(
      'representative_image_default' => $method,
    );
    $this->drupalPost('admin/config/media/representative_image', $edit, t('Save configuration'));
  }

  /**
   * Get the id for the given type of entity.
   *
   * @param  $type
   *   Entity type.
   *
   * @return string
   */
  public function getIdFromPath($type) {
    $match = array();

    switch ($type) {
      case 'node':
        $pattern = '/node\/([0-9]+)/';
        break;
      case 'file':
        $pattern = '|file/([0-9]+)|';
        break;
      case 'comment':
        $pattern = '/#comment-([0-9]+)/';
        break;
      default:
        $pattern = '';
    }

    preg_match($pattern, $this->getURL(), $match);
    $id = isset($match[1]) ? $match[1] : '';
    $this->assertTrue(!empty($id), $type . ' id found.');

    return $id;
  }

}
